name: terratest
on:
  workflow_dispatch: # leave this here so other repos can run manually?
  workflow_call:
    inputs:
      timeout:
        required: false
        type: string
        default: 15m
    secrets:
      TE_APPROLE_ID:
        required: false
      TE_SECRET_ID:
        required: false
      ARM_CLIENT_ID:
         required: false
      ARM_CLIENT_SECRET:
         required: false
      ARM_TENANT_ID:
         required: false
      ARM_SUBSCRIPTION_ID:
         required: false

jobs:
  terratest:
    runs-on: ubuntu-latest
    name: terratest-action
    env:
      TF_CLI_ARGS: -no-color
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # - uses: hashicorp/setup-terraform@v2
    #   with:
    #     terraform_wrapper: false
    #     terraform_version: ${{ env.TERRAFORM_VERSION }}
    - name: download-terraform
      run: |
        if [ -n "$TERRAFORM_VERSION" ]; then
            echo "TERRAFORM_VERSION variable is set: ${TERRAFORM_VERSION}"
            echo "This repository requires Terraform version ${TERRAFORM_VERSION}"
        else
            err_msg="TERRAFORM_VERSION variable is not set!"
            echo "You MUST include a TERRAFORM_VERSION variable in this pipeline!"
            echo ${err_msg}
            exit 1
        fi

        echo "Terraform CLI version download URL:"
        echo "${TF_DL_URL}"

        MY_OUTPUT=$(curl \
        --request GET \
        -o "${RUNNER_TEMP}/terraform.zip" \
        ${TF_DL_URL})

        echo $MY_OUTPUT | jq -C .
        unzip "${RUNNER_TEMP}/terraform.zip" &&\
        chmod +x "${RUNNER_TEMP}/terraform" &&\
        rm "${RUNNER_TEMP}/terraform.zip"

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: Test
      working-directory: test
      run: |
        printenv | sort
        go test -v -timeout ${{ inputs.timeout }} | tee ${{ runner.temp }}/test_output.log
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID:  ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}

    - name: Download Terratest Log Parser
      run: |
        TLP_URL=$(curl https://api.github.com/repos/gruntwork-io/terratest/releases/latest -k -s | jq -r '.assets[] | select(.name == "terratest_log_parser_linux_amd64").browser_download_url')
        curl \
          --silent \
          --location \
          --fail \
          --show-error \
          -o ${{ runner.temp }}/terratest_log_parser "$TLP_URL"
        chmod +x ${{ runner.temp }}/terratest_log_parser

    - name: Generate JUnit report
      if: always()
      run: |
        ${{ runner.temp }}/terratest_log_parser -testlog ${{ runner.temp }}/test_output.log -outputdir test-results
        cat test-results/report.xml

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: test-results/**/*.xml
